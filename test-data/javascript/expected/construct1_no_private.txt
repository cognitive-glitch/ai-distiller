<file path="/home/janreges/ai-distiller/test-data/javascript/construct_1_scope.js">
# Test var hoisting
# undefined, not ReferenceError
+hoistedVar = 'I am hoisted'
# Test function hoisting
# Works due to hoisting
+hoistedFunction():
    {
        console.log('Function declarations are hoisted');
    }
# Test block scoping
+scopeTest():
    {
        // Test 1: Classic var hoisting in a loop
        for (var i = 0; i < 3; i++) {
            setTimeout(() => console.log(`var i: ${i}`), 10); // Expects 3, 3, 3
        }
        // Test 2: let block-scoping in a loop
        for (let j = 0; j < 3; j++) {
            setTimeout(() => console.log(`let j: ${j}`), 10); // Expects 0, 1, 2
        }
        // Test 3: Closure over a changing variable
        let a = 1;
        const closure = {
            getA: () => a,
            setA: (val) => { a = val; }
        };
        
        console.log(`Initial a: ${closure.getA()}`); // Expects 1
        a = 5; // Mutate from outside
        console.log(`Mutated a: ${closure.getA()}`); // Expects 5
        
        return closure;
    }
# Test IIFE (Immediately Invoked Function Expression)
+final privateScope = (function() {
    var privateVar = 'I am private';
    
    return {
        getPrivate: function() {
            return privateVar;
        }
    };
})()
# Test arrow function vs regular function context
+final contextTest = { name, regularMethod(), arrowMethod(), nestedTest() }
# Test default parameters
+defaultParams(a = 1, b = a * 2):
    {
        return a + b;
    }
# Export for module testing
# module.exports = {
    scopeTest,
    privateScope,
    contextTest,
    defaultParams
}
</file>
