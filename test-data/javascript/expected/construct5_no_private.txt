<file path="/home/janreges/ai-distiller/test-data/javascript/construct_5_meta.js">
# Symbol for private data
+final secretData = Symbol('secretData')
+final metaInfo = Symbol('metaInfo')
+final dynamicApiHandler: ProxyHandler = { get(target, prop, receiver), set(target, prop, value, receiver), has(target, prop), deleteProperty(target, prop), ownKeys(target) }
+createDynamicObject(initialData: Object) -> Proxy:
    {
        const obj = {
            [secretData]: initialData,
            [metaInfo]: {
                created: Date.now(),
                changes: []
            }
        };
        return new Proxy(obj, dynamicApiHandler);
    }

class SecureStorage:
    +constructor(password):
        {
                // Use WeakMap for true private data
                SecureStorage.#instances.set(this, {
                    password,
                    data: new Map()
                });
                SecureStorage.#accessCount.set(this, 0);
            }
    +store(key, value, password):
        {
                const instance = SecureStorage.#instances.get(this);
                if (instance.password !== password) {
                    throw new Error('Invalid password');
                }
                instance.data.set(key, value);
                this.#incrementAccess();
            }
    +retrieve(key, password):
        {
                const instance = SecureStorage.#instances.get(this);
                if (instance.password !== password) {
                    throw new Error('Invalid password');
                }
                this.#incrementAccess();
                return instance.data.get(key);
            }
    +getAccessCount():
        {
                return SecureStorage.#accessCount.get(this) || 0;
            }
+sql(strings: string[], ...values: ...any) -> Object:
    {
        const query = strings.reduce((result, str, i) => {
            return result + str + (values[i] !== undefined ? `$${i + 1}` : '');
        }, '');
        
        return {
            text: query.trim(),
            values: values,
            execute() {
                console.log(`Executing: ${this.text}`);
                console.log(`With values:`, this.values);
                return Promise.resolve({ rows: [], rowCount: 0 });
            }
        };
    }
+final safePropertyAccess = { getSafe(obj, prop, defaultValue), setSafe(obj, prop, value), definePropertySafe(obj, prop, descriptor) }
# Usage examples
+final user = createDynamicObject({ name: 'Alex', role: 'admin' })
# Dynamic getters
# "name: Alex"
# "role: admin"
# "No data for key: email"
# Dynamic setters
# "email: alex@example.com"
# Regular property access
# Tagged template usage
+final query = sql`SELECT * FROM users WHERE name = ${'Alex'} AND role = ${'admin'}`
# Export all constructs
# Exports: createDynamicObject, SecureStorage, sql, safePropertyAccess, secretData, metaInfo
</file>
