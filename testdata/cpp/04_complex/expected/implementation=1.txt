<file path="/home/janreges/ai-distiller/testdata/cpp/04_complex/source.cpp">
#include "iostream"
#include "string"
#include "vector"
#include "memory"
#include "algorithm"
#include "functional"
#include "type_traits"
#include "utility"
#include "tuple"
#include "variant"
#include "optional"
#include "any"
#include "thread"
#include "future"
#include "chrono"
void factorial(int n) const {
return (n <= 1) ? 1 : n * factorial(n - 1);
}
bool is_callable_v;
void insert_if_possible(Container& container, T& value) {
container.insert(std::forward<T>(value));
}
void insert_if_possible(Container& container, T& value) {
container.push_back(std::forward<T>(value));
}
void CompileTimeString(char )
struct DataVisitor {
    void operator()(int value) {
return "Integer: " + std::to_string(value);
    }
    void operator()(double value) {
return "Double: " + std::to_string(value);
    }
    void operator()(& value) {
return "String: " + value;
    }
void demonstrateComplexFeatures() {
// Compile-time computation
    constexpr auto fact5 = factorial(5);
    
    // CRTP demonstration
    Point p1(1.0, 2.0);
    Point p2(3.0, 4.0);
    bool isLess = p1 < p2;
    
    // Variadic template
    VariadicProcessor<int, double, std::string> processor(42, 3.14, "Hello");
    
    // Variant visitor
    std::vector<DataVariant> variants = {42, 3.14, std::string("test")};
    for (const auto& var : variants) {
        std::string result = std::visit(DataVisitor{}, var);
        std::cout << result << std::endl;
    }
    
    // Advanced container
    AdvancedContainer<int> container;
    container.insert(3);
    container.insert(1);
    container.insert(4);
    
    // Async processing
    AsyncProcessor asyncProc;
    auto result = asyncProc.processWithTimeout(42, 200);
    
    std::cout << "Factorial(5): " << fact5 << std::endl;
    std::cout << "Point comparison: " << (isLess ? "true" : "false") << std::endl;
    std::cout << "Container size: " << container.size() << std::endl;
    std::cout << "Async result: " << (result ? *result : "timeout") << std::endl;
}
</file>
