<file path="/home/janreges/ai-distiller/testdata/cpp/05_very_complex/source.cpp">
#include "iostream"
#include "string"
#include "vector"
#include "memory"
#include "algorithm"
#include "functional"
#include "type_traits"
#include "utility"
#include "tuple"
#include "variant"
#include "optional"
#include "any"
#include "thread"
#include "future"
#include "chrono"
#include "concepts"
#include "coroutine"
#include "ranges"
#include "span"
struct SimpleTask {
    void SimpleTask(auto h)
    void ~SimpleTask()
    void SimpleTask(SimpleTask& other)
    SimpleTask ()
    void SimpleTask(SimpleTask )
    SimpleTask ()
    -auto handle_;
class HasAdvancedMethods {
    void test_serialize(int )
    void test_serialize()
    void test_deserialize(int )
    void test_deserialize()
    void test_validate(int )
    void test_validate()
    static bool has_serialize;
    static bool has_deserialize;
    static bool has_validate;
    static bool is_serializable;
class AdvancedProcessor {
    void constructor(& name)
    T process(T& data)
    void processContainer(Container& container)
    void generateSequence(T start, size_t count)
    SimpleTask processAsync(T& data)
    *bool validateInput(T& value)
    -auto name_;
    -T processAtCompileTime(T value)
class TypeErasedContainer {
    void store(T& value)
    void processAll(F& f)
    void get()
    size_t size()
    -auto data_;
size_t processString(char* str) {
size_t len = 0;
        while (str[len] != '\0') {
            ++len;
        }
        return len;
}
T complexCalculation(T value) const {
T result = value;
        for (int i = 0; i < 5; ++i) {
            result = result * static_cast<T>(2) + static_cast<T>(1);
        }
        return result;
}
void processRange(Range& range) {
namespace views = std::views;
        
        return range | views::filter([](const auto& x) { return x > 0; })
                    | views::transform([](const auto& x) { return x * 2; })
                    | views::take(10);
}
void demonstrateVeryComplexFeatures()
</file>
