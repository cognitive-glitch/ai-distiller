<file path="/home/janreges/ai-distiller/testdata/cpp/03_medium/source.cpp">
#include "iostream"
#include "string"
#include "vector"
#include "memory"
#include "algorithm"
#include "functional"
#include "type_traits"
#include "future"
#include "thread"
#include "chrono"
#include "exception"
#include "utility"
bool has_process_method_v;
class ResourceManager {
    void constructor(Resource* resource, Deleter deleter)
    void constructor(ResourceManager& other)
    ResourceManager ()
    void destructor()
    void constructor(ResourceManager )
    ResourceManager ()
    Resource ()
    Resource ()
    void reset(Resource* resource)
    void ()
    Resource ()
    Resource ()
    -Deleter deleter_;
class IProcessor {
    virtual void destructor()
    virtual void process(& data) = 0
    virtual void getName() = 0
class TextProcessor : public IProcessor {
    void constructor(& name)
    void process(& data)
    void getName()
    -auto name_;
class Calculator {
    static T add(T& a, T& b)
    static T multiply(T& a, T& b)
    static void getTypeName()
class  {
    static double add(double& a, double& b)
    static double multiply(double& a, double& b)
    static double divide(double& a, double& b)
    static void getTypeName()
class  {
    static T constructor()
    static void getTypeName()
class ProcessingPipeline {
    void constructor()
    void addProcessor(auto processor)
    void process(& input)
    void processAsync(& input)
    void processMultiple(& inputs)
    size_t getProcessorCount()
    *IProcessor () const
    -auto processors_;
    -bool validateData(& data)
void safeProcess(T& obj, & data)
void safeProcess(T& obj, & data)
void makeUnique()
class ProcessingException : public std::exception {
    void constructor(& message)
    char () const
    -auto message_;
void demonstrateAdvancedFeatures()
</file>
