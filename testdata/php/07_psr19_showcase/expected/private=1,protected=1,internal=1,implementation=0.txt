<file path="source.php">
namespace App\PSR19Showcase;
use InvalidArgumentException;
use RuntimeException;
use DateTimeInterface;
/**
 * User entity with comprehensive PSR-19 annotations
 * 
 * @author John Doe <john@example.com>
 * @copyright 2024 Example Corp
 * @version 2.1.0
 * @since 1.0.0
 * 
 * @package App\Entities
 * @api
 * 
 * @property-read int $id User ID (auto-generated)
 * @property string $name User's full name
 * @property string $email User's email address
 * @property-write array<string, mixed> $preferences User preferences (write-only for security)
 * @property-read DateTimeInterface $createdAt Account creation date
 * @property-read DateTimeInterface $lastLogin Last login timestamp
 * 
 * @method static User|null find(int $id) Find user by ID
 * @method static list<User> findByEmail(string $email) Find users by email
 * @method bool hasRole(string $role) Check if user has specific role
 * @method void sendNotification(string $message, array $options = []) Send notification to user
 * 
 * @see https://example.com/docs/user-entity
 * @link https://github.com/example/app/blob/main/docs/USER.md Documentation
 * 
 * @todo Implement two-factor authentication support
 * @todo Add user avatar support
 */
class User {
    public static find(int $id): User|null
    public static findByEmail(string $email): User[]
    public hasRole(string $role): bool
    public sendNotification(string $message, array $options = $[]): void
    private int $id;
    protected string $displayName;
    private array<string, mixed> Internal data storage $data;
    public __construct(string $email, string $name)
    public getEmail(): string The user's email
    public setEmail(string $email): void
    private validateEmail(string $email): void
    private checkEmailUniqueness(string $email): void
}
/**
 * User repository for data persistence
 * 
 * @author Jane Smith <jane@example.com>
 * @version 1.5.0
 * @since 1.0.0
 * 
 * @method User|null findOneBy(array $criteria) Find single user by criteria
 * @method list<User> findBy(array $criteria, array $orderBy = []) Find users by criteria
 * @method int count(array $criteria = []) Count users matching criteria
 * 
 * @deprecated 2.0.0 Use UserService instead
 * @see UserService For the new implementation
 */
class UserRepository {
    public findOneBy(array $criteria): User|null
    public findBy(array $criteria, array $orderBy = $[]): User[]
    public count(array $criteria = $[]): int
    private array<int, User> In-memory user storage $users;
    public find(int $id): ?User
    public save(User $user): void
}
/**
 * Modern user service replacing UserRepository
 * 
 * @author Development Team <dev@example.com>
 * @version 1.0.0
 * @since 2.0.0
 * 
 * @api
 * @generated Partially generated by code generator v3.2
 * 
 * @uses CacheInterface For result caching
 * @uses LoggerInterface For operation logging
 * @usedby UserController
 * @usedby AuthenticationService
 */
class UserService {
    public getUser(int $id): ?User
    public createUser(array{email: string, name: string, roles?: list<string>} $data): User
}
</file>
