<file path="source.php">
@api
class User {
    // Magic properties from @property* tags
    property-read int $id                           // @property-read User ID (auto-generated)
    property string $name                           // @property User's full name
    property string $email                          // @property User's email address
    property-write array<string, mixed> $preferences // @property-write User preferences (write-only for security)
    property-read DateTimeInterface $createdAt      // @property-read Account creation date
    property-read DateTimeInterface $lastLogin      // @property-read Last login timestamp
    
    // Magic methods from @method tags
    static method User|null find(int $id)           // @method Find user by ID
    static method list<User> findByEmail(string $email) // @method Find users by email
    method bool hasRole(string $role)               // @method Check if user has specific role
    method void sendNotification(string $message, array $options) // @method Send notification to user
    
    // Actual implementation
    protected string $displayName                    // @api
    
    @api @since(1.0.0)
    public __construct(string $email, string $name) // @throws InvalidArgumentException, RuntimeException
    
    @api @since(1.0.0)
    public getEmail(): string
    
    @api @since(1.2.0)
    public setEmail(string $email): void            // @throws InvalidArgumentException, RuntimeException
}

@deprecated(2.0.0) @see(UserService)
class UserRepository {
    // Magic methods from @method tags
    method User|null findOneBy(array $criteria)     // @method Find single user by criteria
    method list<User> findBy(array $criteria, array $orderBy) // @method Find users by criteria
    method int count(array $criteria)               // @method Count users matching criteria
    
    @api @since(1.0.0) @deprecated(2.0.0)
    public find(int $id): ?User
    
    @api @since(1.0.0) @deprecated(2.0.0)
    public save(User $user): void                   // @throws RuntimeException
}

@api @since(2.0.0) @generated
class UserService {
    @api @since(2.0.0)
    public getUser(int $id): ?User                  // @throws RuntimeException
    
    @api @since(2.0.0)
    public createUser(array{email: string, name: string, roles?: list<string>} $data): User // @throws InvalidArgumentException, RuntimeException
}
</file>