<file path="source.php">
interface PersistableInterface {
    getId(): ?int
    setId(int $id): void
    getCreatedAt(): ?DateTimeInterface
}
interface CacheableInterface {
    getCacheKey(): string
    getCacheTtl(): int
}
abstract class BaseEntity implements PersistableInterface, JsonSerializable {
    getId(): ?int {
return $this->id;
    }
    setId(int $id): void {
$this->id = $id;
    }
    getCreatedAt(): ?DateTimeInterface {
return $this->createdAt;
    }
    setCreatedAt(DateTimeInterface $createdAt): void {
$this->createdAt = $createdAt;
    }
    getUpdatedAt(): ?DateTimeInterface {
return $this->updatedAt;
    }
    setUpdatedAt(DateTimeInterface $updatedAt): void {
$this->updatedAt = $updatedAt;
    }
    abstract getEntityName(): string
    jsonSerialize(): array {
return [
            'id' => $this->id,
            'entity_name' => $this->getEntityName(),
            'created_at' => $this->createdAt?->format('c'),
            'updated_at' => $this->updatedAt?->format('c'),
        ];
    }
}
class trait TimestampableTrait {
}
class trait ValidatableTrait {
    getValidationErrors(): array {
return $this->validationErrors;
    }
    hasValidationErrors(): bool {
return !empty($this->validationErrors);
    }
}
class Product extends BaseEntity implements CacheableInterface {
    static $CACHE_TTL = 3600;
    __construct(string $name, float $price, string $description) {
$this->name = $name;
        $this->price = $price;
        $this->description = $description;
        $this->updateTimestamps();
    }
    getName(): string {
return $this->name;
    }
    setName(string $name): void {
$this->name = $name;
        $this->updateTimestamps();
    }
    getPrice(): float {
return $this->price;
    }
    setPrice(float $price): void {
$this->price = $price;
        $this->updateTimestamps();
    }
    getEntityName(): string {
return 'product';
    }
    getCacheKey(): string {
return sprintf('product:%d', $this->id ?? 0);
    }
    getCacheTtl(): int {
return self::CACHE_TTL;
    }
    addCategory(string $category): void {
if (!in_array($category, $this->categories)) {
            $this->categories[] = $category;
        }
    }
    static createSaleProduct(string $name, float $originalPrice, float $discountPercent): self {
$salePrice = $originalPrice * (1 - $discountPercent / 100);
        $description = sprintf("Sale item - %d%% off!", $discountPercent);
        
        return new self($name, $salePrice, $description);
    }
}
class Category extends BaseEntity {
    readonly string $name;
    readonly string $slug;
    __construct(string $name, string $slug) {
$this->name = $name;
        $this->slug = $slug;
    }
    getEntityName(): string {
return 'category';
    }
    setParent(?Category $parent): void {
$this->parent = $parent;
    }
    getParent(): ?Category {
return $this->parent;
    }
}
</file>
