<file path="source.php">
namespace App\Simple;
use DateTimeInterface;
use JsonSerializable;
/** Interface for entities that can be persisted */
interface PersistableInterface {
    public getId(): ?int
    public setId(int $id): void
    public getCreatedAt(): ?DateTimeInterface
}
/** Interface for cacheable entities */
interface CacheableInterface {
    public getCacheKey(): string
    public getCacheTtl(): int
}
abstract class BaseEntity implements PersistableInterface, JsonSerializable {
    public getId(): ?int
    public setId(int $id): void
    public getCreatedAt(): ?DateTimeInterface
    public setCreatedAt(DateTimeInterface $createdAt): void
    public getUpdatedAt(): ?DateTimeInterface
    public setUpdatedAt(DateTimeInterface $updatedAt): void
    public abstract getEntityName(): string
    public jsonSerialize(): array
}
/** Trait for timestampable entities */
trait TimestampableTrait {
}
/** Trait for validation functionality */
trait ValidatableTrait {
    public getValidationErrors(): array<string, string>
    public hasValidationErrors(): bool
}
class Product extends BaseEntity implements CacheableInterface {
    use TimestampableTrait;
    use ValidatableTrait;
    public const CACHE_TTL = 3600;
    public __construct(string $name, float $price, string $description = '')
    public getName(): string
    public setName(string $name): void
    public getPrice(): float
    public setPrice(float $price): void
    public getEntityName(): string
    public getCacheKey(): string
    public getCacheTtl(): int
    public addCategory(string $category): void
    public static createSaleProduct(string $name, float $originalPrice, float $discountPercent): self
}
class Category extends BaseEntity {
    public readonly string $name;
    public readonly string $slug;
    public __construct(string $name, string $slug)
    public getEntityName(): string
    public setParent(?Category $parent): void
    public getParent(): ?Category
}
</file>
