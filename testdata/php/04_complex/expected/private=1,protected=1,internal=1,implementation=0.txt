<file path="source.php">
namespace App\Complex;
use Attribute;
use ReflectionClass;
use ReflectionMethod;
use ReflectionProperty;
use ReflectionAttribute;
use Generator;
use Closure;
use WeakMap;
use SplObjectStorage;
class Route {
    public readonly string $path;
    public readonly string $method;
    public readonly array $middleware;
    public __construct(string $path, string $method = 'GET', string[] $middleware = [])
}
class Validate {
    public readonly string $rule;
    public readonly string $message;
    public __construct(string $rule, string $message = '')
}
class Inject {
    public readonly ?string $service;
    public __construct(?string $service = null)
}
class AttributeProcessor {
    private WeakMap $classCache;
    public processAttributes(object $instance): array{class: list<array{name: string, arguments: array<mixed>, instance: object}>, methods: array<string, list<array{name: string, arguments: array<mixed>, instance: object}>>, properties: array<string, list<array{name: string, arguments: array<mixed>, instance: object}>>} Processed attributes
    private processClassAttributes(ReflectionClass $reflection): array
    private processMethodAttributes(ReflectionClass $reflection): array
    private processPropertyAttributes(ReflectionClass $reflection): array
    public findMethodsWithAttribute(ReflectionClass $reflection, string $attributeClass): Generator
}
class ApiController {
    private AttributeProcessor $attributeProcessor;
    public getUserProfile(int $id): array
    public updateUserProfile(int $id, array<string, mixed> $data): array{id: int, updated: bool, data: array<string, mixed>}
    public deleteUser(int $id): array
    public getRoutes(): array
}
class UserCreateDto {
    public string $name;
    public string $email;
    public int $age;
    public array<string, mixed> User preferences $preferences;
    public static fromArray(array{name?: string, email?: string, age?: int, preferences?: array<string, mixed>} $data): self
    public validate(): array Validation errors
    private validateRule(mixed $value, string $rule, string $message): ?string
}
class ServiceLocator {
    private array<string, callable> Service factories $factories;
    private SplObjectStorage $singletons;
    private array<string, array{singleton: bool}> Service metadata $metadata;
    public register(string $id, Closure $factory, bool $singleton = false, array<string, mixed> $metadata = []): void
    public resolve(string $id): mixed
    public createWithDependencies(string $className): object
    public has(string $id): bool
    public getMetadata(string $id): array
    public getServiceIds(): array
}
class ComplexUserService {
    private UserRepository $repository;
    private EventDispatcher $dispatcher;
    private AttributeProcessor $processor;
    public __construct(UserRepository $repository, EventDispatcher $dispatcher, AttributeProcessor $processor)
    public createUser(UserCreateDto $dto): array
    public processUsers(array $users): Generator
}
</file>
