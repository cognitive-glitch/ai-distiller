<file path="source.php">
namespace App\Complex;
use ReflectionClass;
use Generator;
use Closure;
#[Attribute(Attribute::TARGET_METHOD)]
class Route {
    public readonly string $path;
    public readonly string $method;
    public readonly array $middleware;
    public __construct(string $path, string $method = 'GET', string[] $middleware = [])
}
#[Attribute(Attribute::TARGET_PROPERTY | Attribute::IS_REPEATABLE)]
class Validate {
    public readonly string $rule;
    public readonly string $message;
    public __construct(string $rule, string $message = '')
}
#[Attribute(Attribute::TARGET_PARAMETER)]
class Inject {
    public readonly ?string $service;
    public __construct(?string $service = null)
}
class AttributeProcessor {
    public processAttributes(object $instance): array{class: list<array{name: string, arguments: array<mixed>, instance: object}>, methods: array<string, list<array{name: string, arguments: array<mixed>, instance: object}>>, properties: array<string, list<array{name: string, arguments: array<mixed>, instance: object}>>} Processed attributes {
$class = $instance::class;
        $reflection = new ReflectionClass($class);

        if (isset($this->classCache[$instance])) {
            return $this->classCache[$instance];
        }

        $result = [
            'class' => $this->processClassAttributes($reflection),
            'methods' => $this->processMethodAttributes($reflection),
            'properties' => $this->processPropertyAttributes($reflection),
        ];

        $this->classCache[$instance] = $result;
        return $result;
    }
    public findMethodsWithAttribute(ReflectionClass $reflection, string $attributeClass): Generator {
foreach ($reflection->getMethods() as $method) {
            $attributes = $method->getAttributes($attributeClass);
            foreach ($attributes as $attribute) {
                yield $method => $attribute;
            }
        }
    }
}
class ApiController {
    #[Route('/api/users/{id}', 'GET', ['auth', 'throttle'])]
    public getUserProfile(int $id): array {
return ['id' => $id, 'name' => 'John Doe'];
    }
    #[Route('/api/users/{id}', 'PUT', ['auth', 'validate'])]
    public updateUserProfile(int $id, array<string, mixed> $data): array{id: int, updated: bool, data: array<string, mixed>} {
return ['id' => $id, 'updated' => true, 'data' => $data];
    }
    #[Route('/api/users/{id}', 'DELETE', ['auth', 'admin'])]
    public deleteUser(int $id): array {
return ['id' => $id, 'deleted' => true];
    }
    public getRoutes(): array {
$reflection = new ReflectionClass($this);
        $routes = [];

        foreach ($this->attributeProcessor->findMethodsWithAttribute($reflection, Route::class) as $method => $attribute) {
            $route = $attribute->newInstance();
            $routes[] = [
                'method' => $method->getName(),
                'path' => $route->path,
                'http_method' => $route->method,
                'middleware' => $route->middleware,
            ];
        }

        return $routes;
    }
}
class UserCreateDto {
    #[Validate('required', 'Name is required')]
    #[Validate('min:2', 'Name must be at least 2 characters')]
    public string $name;
    #[Validate('required', 'Email is required')]
    #[Validate('email', 'Invalid email format')]
    public string $email;
    #[Validate('required', 'Age is required')]
    #[Validate('min:18', 'Must be at least 18 years old')]
    #[Validate('max:120', 'Age cannot exceed 120')]
    public int $age;
    public array<string, mixed> User preferences $preferences;
    public static fromArray(array{name?: string, email?: string, age?: int, preferences?: array<string, mixed>} $data): self {
$dto = new self();

        foreach ($data as $key => $value) {
            if (property_exists($dto, $key)) {
                $dto->$key = $value;
            }
        }

        return $dto;
    }
    public validate(): array Validation errors {
$errors = [];
        $reflection = new ReflectionClass($this);

        foreach ($reflection->getProperties() as $property) {
            $propertyName = $property->getName();
            $value = $property->getValue($this);

            foreach ($property->getAttributes(Validate::class) as $attribute) {
                $validator = $attribute->newInstance();
                $error = $this->validateRule($value, $validator->rule, $validator->message);

                if ($error) {
                    $errors[$propertyName][] = $error;
                }
            }
        }

        return $errors;
    }
}
class ServiceLocator {
    public register(string $id, Closure $factory, bool $singleton = false, array<string, mixed> $metadata = []): void {
$this->factories[$id] = $factory;
        $this->metadata[$id] = $metadata + ['singleton' => $singleton];
    }
    public resolve(string $id): mixed {
if (!isset($this->factories[$id])) {
            throw new \InvalidArgumentException("Service '{$id}' not registered");
        }

        $metadata = $this->metadata[$id];

        if ($metadata['singleton']) {
            // Check if singleton already exists
            foreach ($this->singletons as $service) {
                if ($this->singletons[$service] === $id) {
                    return $service;
                }
            }

            // Create new singleton
            $instance = $this->factories[$id]($this);
            $this->singletons[$instance] = $id;
            return $instance;
        }

        return $this->factories[$id]($this);
    }
    public createWithDependencies(string $className): object {
$reflection = new ReflectionClass($className);
        $constructor = $reflection->getConstructor();

        if (!$constructor) {
            return new $className();
        }

        $dependencies = [];

        foreach ($constructor->getParameters() as $parameter) {
            $injectAttributes = $parameter->getAttributes(Inject::class);

            if (!empty($injectAttributes)) {
                $inject = $injectAttributes[0]->newInstance();
                $serviceId = $inject->service ?? $parameter->getType()?->getName();

                if ($serviceId && $this->has($serviceId)) {
                    $dependencies[] = $this->resolve($serviceId);
                } else {
                    $dependencies[] = $parameter->getDefaultValue();
                }
            } else {
                $type = $parameter->getType();
                if ($type && !$type->isBuiltin() && $this->has($type->getName())) {
                    $dependencies[] = $this->resolve($type->getName());
                } else {
                    $dependencies[] = $parameter->getDefaultValue();
                }
            }
        }

        return $reflection->newInstanceArgs($dependencies);
    }
    public has(string $id): bool {
return isset($this->factories[$id]);
    }
    public getMetadata(string $id): array {
return $this->metadata[$id] ?? [];
    }
    public getServiceIds(): array {
return array_keys($this->factories);
    }
}
class ComplexUserService {
    public __construct(UserRepository $repository, EventDispatcher $dispatcher, AttributeProcessor $processor)
    public createUser(UserCreateDto $dto): array {
$errors = $dto->validate();

        if (!empty($errors)) {
            return ['success' => false, 'errors' => $errors];
        }

        // Create user logic here
        return ['success' => true, 'user_id' => 123];
    }
    public processUsers(array $users): Generator {
foreach ($users as $userData) {
            $dto = UserCreateDto::fromArray($userData);
            $result = $this->createUser($dto);

            yield [
                'original' => $userData,
                'processed' => $result,
                'timestamp' => time(),
            ];
        }
    }
}
</file>
