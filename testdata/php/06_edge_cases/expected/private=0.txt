<file path="source.php">
namespace App\EdgeCases;
use Closure;
use Generator;
use Countable;
use Iterator;
/**
 * Edge case demonstrations for PHP docblock annotations
 * Testing advanced type annotations used in real-world PHP projects
 */
/**
 * Class demonstrating magic properties and complex array shapes
 *
 * @property-read int $id Auto-generated ID
 * @property string $name Mutable name property
 * @property-write array<string, mixed> $metadata Write-only metadata
 */
class MagicModel {
}
class ContainerService {
    public make(class-string<T> $className, array<string, mixed> $parameters = []): T
    public register(literal-string $id, callable(): object $factory): void
}
class ComplexDto {
    public process(array $payload): array{success: bool, data?: array<string, mixed>, errors?: list<string>}
    public const STATUS_MAP = [
        'draft' => 0,
        'published' => 1,
        'archived' => 2
    ];
    public getRandomStatus(): key-of<self::STATUS_MAP>
    public getStatusValue(key-of<self::STATUS_MAP> $status): value-of<self::STATUS_MAP>
}
class TypedCollection {
    public firstWhere(callable(mixed): bool $predicate, callable(mixed): T $mapper): T|null
    public mapToAssoc(callable(mixed): array{0: TKey, 1: TValue} $mapper): array<TKey, TValue>
}
class CallableTypes {
    public setValidator(callable(int, string=): bool $validator): void
    public execute(callable-string $callback, array<int, mixed> $args = []): mixed
    public createProcessor(): Closure
}
/** Intersection and union type demonstrations */
interface Timestampable {
    public getTimestamp(): int
}
interface Identifiable {
    public getId(): int
}
class IntersectionHandler {
    public process(array<int, (Timestampable&Identifiable)> $items): list<array{id: int, timestamp: int}>
    public categorize(array<int, (Countable|Iterator)> $items): array{countables: list<Countable>, iterators: list<Iterator>}
}
/** Enum and int-mask demonstrations */
enum Permission: int {
    case READ = 1;
    case WRITE = 2;
    case DELETE = 4;
    case ADMIN = 8;
}
class PermissionChecker {
    public hasPermission(int-mask-of<Permission::*> $userPermissions, int-mask<1, 2, 4, 8> $requiredPermissions): bool
    public getAllPermissionValues(): value-of<Permission>[]
}
class ValidationService {
    public isNonEmpty(?string $value): bool
    public parseJsonOrDefault(string $json, T $default = null): mixed
    public ensureArray(T $value): array
}
class GeneratorTypes {
    public generatePairs(array<TKey, TValue> $data): Generator
    public bidirectionalGenerator(): Generator
}
class TypeAliasDemo {
    public getUser(UserId $id): UserData|ErrorResponse
    public batchGet(UserId[] $ids): array<UserId, UserData|ErrorResponse>
}
class NumericKeyArrays {
    public processTuple(array{0: string, 1: int, 2?: bool} $tuple): array{name: string, age: int, active: bool}
    public analyzeMatrix(non-empty-array<int<0, 10>, non-empty-array<int<0, 10>, float>> $matrix): array{rows: int<1, 11>, cols: int<1, 11>, sum: float}
}
/**
 * Global function with type imports
 *
 * @param \App\EdgeCases\TypeAliasDemo::UserId $userId
 * @return \App\EdgeCases\TypeAliasDemo::UserData
 */
getUserGlobal(\App\EdgeCases\TypeAliasDemo::UserId $userId): \App\EdgeCases\TypeAliasDemo::UserData
</file>
