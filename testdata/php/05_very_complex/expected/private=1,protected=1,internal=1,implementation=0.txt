<file path="/home/janreges/ai-distiller/testdata/php/05_very_complex/source.php">
class ProxyTarget {
    readonly array $interceptMethods;
    readonly string $proxyClass;
    __construct(array $interceptMethods, string $proxyClass)
}
class Intercept {
    readonly string $before;
    readonly string $after;
    readonly bool $cache;
    __construct(string $before, string $after, bool $cache)
}
class Memoize {
    readonly int $ttl;
    readonly string $keyGenerator;
    __construct(int $ttl, string $keyGenerator)
}
class DynamicProxyFactory {
    -WeakMap $proxyCache;
    -array<string, WeakReference> Method interceptors $interceptors;
    -SplObjectStorage $memoCache;
    __construct()
    createProxy(object $target): object
    -generateProxy(object $target, ReflectionClass $reflection, ProxyTarget $config): object
    -generateProxyClass(ReflectionClass $reflection, ProxyTarget $config): string
    -buildProxyClassCode(ReflectionClass $reflection, string $proxyClassName, ProxyTarget $config): string
    -generateProxyMethod(ReflectionMethod $method): string
    -buildParameterList(ReflectionMethod $method): string
    -buildParameterNames(ReflectionMethod $method): string
    interceptMethod(object $target, string $methodName, array $arguments): mixed
    -generateCacheKey(object $target, string $methodName, array $arguments, Memoize $config): string
    -callInterceptor(object $target, string $interceptorMethod, array $arguments): void
}
interface ProxyInterface {
    __getTarget(): object
}
class AsyncOperationManager {
    -array<string, Fiber> Active fibers $fibers;
    -array<string, mixed> Fiber results $results;
    execute(string $id, Closure $operation): void
    resume(string $id, mixed $value): void
    getResult(string $id): mixed
    isComplete(string $id): bool
    waitAll(): Generator
}
class OrderService {
    -AsyncOperationManager $asyncManager;
    __construct()
    calculatePrice(array $items, string $currency): float
    processOrder(array $orderData): string
    generatePriceKey(string $methodName, array $arguments): string
    *logPriceCalculation(array $items, string $currency): void
    *validatePriceResult(float $result): void
    *validateOrder(array $orderData): void
    *notifyOrderProcessed(string $orderId): void
    -getCurrencyMultiplier(string $currency): float
    -processPayment(array $paymentData): void
    -updateInventory(array $items): void
    -sendConfirmation(array $customerData): void
    getOrderStatus(string $orderId): array Status information
}
class MetaProgrammingDemo {
    createDynamicClass(string $className, array $properties, array $methods): string
    addMethod(object $object, string $methodName, Closure $implementation): void
    analyzeObject(object $object): array Analysis result
    -analyzeProperties(ReflectionClass $reflection): array Properties analysis
    -analyzeMethods(ReflectionClass $reflection): array Methods analysis
    -analyzeAttributes(ReflectionClass $reflection): array Attributes analysis
    -getVisibility(ReflectionProperty|ReflectionMethod $member): string
}
</file>
