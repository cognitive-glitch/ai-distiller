<file path="source.php">
namespace App\Basic;
use DateTime;
use InvalidArgumentException;
class User {
    public int $id;
    public string $name;
    public __construct(int $id, string $name, string $email) {
$this->id = $id;
        $this->name = $name;
        $this->setEmail($email);
        $this->createdAt = new DateTime();
    }
    public getEmail(): string {
return $this->email;
    }
    public setEmail(string $email): void {
if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
            throw new InvalidArgumentException("Invalid email format");
        }
        $this->email = $email;
    }
    public getPreference(string $key, mixed $default = null): mixed {
return $this->preferences[$key] ?? $default;
    }
    public setPreference(string $key, mixed $value): void {
$this->preferences[$key] = $value;
    }
    public isActive(): bool {
if ($this->createdAt === null) {
            return false;
        }

        $thirtyDaysAgo = new DateTime('-30 days');
        return $this->createdAt > $thirtyDaysAgo;
    }
    public toArray(): array{id: int, name: string, email: string, created_at: string|null, is_active: bool} {
return [
            'id' => $this->id,
            'name' => $this->name,
            'email' => $this->email,
            'created_at' => $this->createdAt?->format('Y-m-d H:i:s'),
            'is_active' => $this->isActive(),
        ];
    }
}
class UserManager {
    public addUser(User $user): void {
$this->users[$user->id] = $user;
    }
    public findUser(int $id): ?User {
return $this->users[$id] ?? null;
    }
    public getActiveUsers(): User[] {
return array_filter($this->users, fn(User $user) => $user->isActive());
    }
    public getUserCount(): int {
return count($this->users);
    }
}
/** Utility functions for user operations */
validateEmail(string $email): bool {
return filter_var($email, FILTER_VALIDATE_EMAIL) !== false;
}
/**
 * Create user from array data
 *
 * @param array{id: int, name: string, email: string} $data User data
 * @return User
 * @throws InvalidArgumentException
 */
createUserFromArray(array{id: int, name: string, email: string} $data): User {
if (!isset($data['id'], $data['name'], $data['email'])) {
        throw new InvalidArgumentException("Missing required user data");
    }

    return new User($data['id'], $data['name'], $data['email']);
}
const USER_STATUS_ACTIVE = 'active'
const USER_STATUS_INACTIVE = 'inactive'
const MAX_USERS_PER_PAGE = 25
</file>
