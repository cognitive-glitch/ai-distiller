<file path="source.rb">

module AdvancedMetaprogramming:
    self.included(base)

    module ClassMethods:
        intercept_method_chain(*method_names*, &interceptor)
        method_chain(name, &definition)

    class MethodChainContext:
        initialize(target, chain_name)
        step(name, &block)
        execute(&final_block)

module CodeGenerator:
    self.generate_crud_methods(class_name, table_name)
    self.generate_validators(target_class, validations)
    self.build_validation_code(field, rules)

class RuntimeCodeModifier:
    initialize
    modify_method(target, method_name, &new_implementation)
    restore_method(target, method_name)
    create_method_proxy(target)
    should_intercept?(method_name)
    intercept_call(target, method_name, args, block)

class QueryDSL:
    initialize
    where(condition)
    join(table, on:)
    order(field, direction:)
    limit(count)
    compile_to_ruby
    execute

class SelfModifyingClass:
    @modifications
    self.add_modification(&block)
    self.apply_modifications
    self.evolve(&evolution_block)
    modify_self_class(&block)
    inspect_modifications

class CustomDispatchFactory:
    self.create_class_with_dispatch(class_name, &dispatch_logic)
</file>
