<file path="source.rb">

module Loggable
    def log(message, level:)
        timestamp = Time.now.iso8601
            puts "[#{timestamp}] #{level.upcase}: #{message}"
    def self.included(base)
        base.extend(ClassMethods)
            base.class_eval do
              attr_accessor :logger_enabled
            end

    module ClassMethods
        def enable_logging
            define_method(:log_enabled?) { @logger_enabled || false }

module Serializable
    def to_json(*args*)
        JSON.generate(serializable_hash, *args)
    def from_json(json_string)
        data = JSON.parse(json_string)
            load_from_hash(data)
    def serializable_hash
        raise NotImplementedError, "Must implement serializable_hash"
    def load_from_hash(hash)
        raise NotImplementedError, "Must implement load_from_hash"

module RoleManager
    VALID_ROLES
    def self.each_role
        return enum_for(:each_role) unless block_given?
            
            VALID_ROLES.each do |role|
              yield role, role.upcase
            end
    def self.find_role(pattern)
        VALID_ROLES.find { |role| role.match?(pattern) }
    def self.role_stats
        roles_with_lengths = VALID_ROLES.map { |role| [role, role.length] }
            roles_with_lengths.select { |_, length| length > 4 }

class Document
    def initialize(title, content, author)
        @title = title
            @content = content
            @author = author
            @created_at = Time.now
            @logger_enabled = true
    def process_content
        return enum_for(:process_content) unless block_given?
            
            log("Processing content for: #{@title}")
            
            lines = @content.split("\n")
            lines.each_with_index do |line, index|
              processed_line = yield(line, index)
              lines[index] = processed_line if processed_line
            end
            
            @content = lines.join("\n")
    def find_sections(pattern = ...)
        sections = []
            @content.each_line.with_index do |line, index|
              sections << { line: index + 1, content: line.strip } if line.match?(pattern)
            end
            
            if block_given?
              sections.each { |section| yield section }
            else
              sections
            end
    def method_missing(method_name, *args*, &block)
        if method_name.to_s.start_with?('find_by_')
              attribute = method_name.to_s.sub('find_by_', '')
              search_value = args.first
              
              case attribute
              when 'author'
                @author == search_value
              when 'title'
                @title.include?(search_value)
              else
                super
              end
            else
              super
            end
    def respond_to_missing?(method_name, include_private = ...)
        method_name.to_s.start_with?('find_by_') || super
    def serializable_hash
        {
              title: @title,
              content: @content,
              author: @author,
              created_at: @created_at.iso8601
            }
    def load_from_hash(hash)
        @title = hash['title']
            @content = hash['content']
            @author = hash['author']
            @created_at = Time.parse(hash['created_at']) if hash['created_at']

class DocumentRepository
    def initialize
        @documents = []
    def add_document(document)
        @documents << document
            log_action("Added document: #{document.title}")
    def filter_documents(&block)
        return @documents.dup unless block_given?
            @documents.select(&block)
    def sort_documents(sort_proc = ...)
        sort_logic = sort_proc || lambda { |a, b| a.created_at <=> b.created_at }
            @documents.sort(&sort_logic)
    def log_action(message)
        puts "[DocumentRepository] #{message}"
    def validate_document(document)
        document.is_a?(Document) && !document.title.empty?
</file>
