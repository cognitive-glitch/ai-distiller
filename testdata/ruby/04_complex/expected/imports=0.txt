<file path="source.rb">

module DSLBuilder:
    self.included(base)

    module ClassMethods:
        dsl_method(name, &default_block)
        chainable_attr(*names*)

    class DSLContext:
        initialize(target)
        method_missing(method_name, *args*, &block)
        respond_to_missing?(method_name, include_private = ...)

module FluentInterface:
    self.included(base)

    module ClassMethods:
        fluent_builder(*method_names*)

module ReflectionUtils:
    self.create_class(class_name, parent_class = ..., &block)
    self.analyze_class(klass)

class ConfigurationBuilder:
    initialize
    add_middleware(middleware_class, *options*)
    add_plugin(plugin_name, &configuration_block)
    method_missing(method_name, *args*, &block)
    respond_to_missing?(method_name, include_private = ...)
    to_hash
    validate_configuration

class PluginConfiguration:
    initialize
    option(key, value)
    timeout(seconds)
    retries(count)
    method_missing(method_name, *args*)
    respond_to_missing?(method_name, include_private = ...)
    to_hash

class DynamicClassFactory:
    self.create_model(name, &definition)
</file>
