<file path="source.rb">

module UserUtils:
    MIN_PASSWORD_LENGTH
    EMAIL_REGEX
    self.valid_email?(email)
        return false unless email.is_a?(String)
            email.match?(EMAIL_REGEX)
    self.strong_password?(password)
        return false unless password.is_a?(String)
            return false if password.length < MIN_PASSWORD_LENGTH
            
            has_letter = password.match?(/[a-zA-Z]/)
            has_digit = password.match?(/\d/)
            has_letter && has_digit
    self.internal_helper
        "This is a private module method"

class User:
    @@user_count
    self.count
        @@user_count
    initialize(name, email)
        @id = generate_id
            @name = name
            @email = email
            @created_at = Time.now
            @@user_count += 1
    to_s
        "User(#{@id}): #{@name} <#{@email}>"
    valid?
        UserUtils.valid_email?(@email) && !@name.empty?
    compare_creation_time(other_user)
        @created_at <=> other_user.created_at
    generate_id
        "user_#{Time.now.to_i}_#{rand(1000)}"

class AdminUser < User:
    initialize(name, email, permissions = ...)
        super(name, email)
            @permissions = permissions || []
    to_s
        "#{super} [Admin]"
    has_permission?(permission)
        @permissions.include?(permission)
    validate_permissions
        @permissions.all? { |p| p.is_a?(String) }
</file>
