<file path="source.cs">
#nullable enable

using System.Threading.Tasks;
namespace Constructs.Complex04;
[AttributeUsage(AttributeTargets.Property, AllowMultiple = false)]
public sealed class StringRangeAttribute : ValidationAttribute {
    public int Min { get; }
    public int Max { get; }
    public StringRangeAttribute(int min, int max);
    public override bool IsValid(object? value);
}
public static class ModelValidatorBuilder {
    public static Func<TModel, bool> Build<TModel>();
}
public record SignupRequest(
    [property: StringRange(3,12)] string Username,
    [property: StringRange(8,64)] string Password) {
    public bool IsPasswordStrong();
}
public static class Demo {
    public static async Task ConsumeAsync(IAsyncEnumerable<SignupRequest> inputs);
}
public class ServiceLocator {
    public void Register<T>(T instance) where T : class;
    public T Resolve<T>() where T : class;
}
</file>
