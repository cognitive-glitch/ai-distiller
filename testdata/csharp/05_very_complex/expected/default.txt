<file path="source.cs">
using System
using System.Collections.Generic
using System.Numerics
using Microsoft.Extensions.DependencyInjection
namespace Constructs.VeryComplex05
class VectorN:
    readonly T[] Components
    readonly int Dim = => Components.Length
    T Dot(VectorN other)
    override string ToString()
interface IAlgebraService:
    VectorN Add(VectorN a, VectorN b)
    T Dot(VectorN a, VectorN b)
    VectorN Normalize(VectorN vector)
sealed class AlgebraService : IAlgebraService:
    VectorN Add(VectorN a, VectorN b)
abstract class CalcCommand:
    sealed class AddCommand : CalcCommand:
        readonly VectorN A
        readonly VectorN B
    sealed class DotCommand : CalcCommand:
        readonly VectorN A
        readonly VectorN B
    sealed class NormalizeCommand : CalcCommand:
        readonly VectorN Vector
    sealed class UnknownCommand : CalcCommand:
class CalcDispatcher:
    static double Execute(cmd CalcCommand, svc IAlgebraService)
class MathProcessor:
    T ProcessValue(input T)
class Program:
    static void Main()
</file>
