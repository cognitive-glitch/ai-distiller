<file path="source.cs">
#nullable enable

namespace Constructs.Medium03;
public interface IRepository<TEntity, TKey> where TEntity : IEntity where TKey : notnull {
    public Task AddAsync(entity TEntity, ct CancellationToken);
    public Task<TEntity?> GetAsync(id TKey, ct CancellationToken);
    public Task<bool> RemoveAsync(id TKey, ct CancellationToken);
    public IAsyncEnumerable<TEntity> QueryAsync(Func<TEntity, bool> predicate, ct CancellationToken);
}
public interface IEntity<TKey> {
}
public abstract record EntityBase(Id T) : IEntity {
public class InMemoryRepository<TEntity, TKey> : IRepository where TEntity : EntityBase where TKey : notnull {
    public Task AddAsync(entity TEntity, ct CancellationToken);
    public Task<TEntity?> GetAsync(id TKey, ct CancellationToken);
    public Task<bool> RemoveAsync(id TKey, ct CancellationToken);
    public async IAsyncEnumerable<TEntity> QueryAsync(Func<TEntity, bool> predicate, ct CancellationToken);
}
public class CachedRepository<TEntity, TKey> : IRepository where TEntity : EntityBase where TKey : notnull {
    public CachedRepository(IRepository<TEntity, TKey> innerRepository, cacheExpiry TimeSpan);
    public async Task AddAsync(entity TEntity, ct CancellationToken);
    public async Task<TEntity?> GetAsync(id TKey, ct CancellationToken);
    public async Task<bool> RemoveAsync(id TKey, ct CancellationToken);
    public IAsyncEnumerable<TEntity> QueryAsync(Func<TEntity, bool> predicate, ct CancellationToken);
}
public record User(
    Id Guid,
    string Name,
    string Email,
    bool IsValid) : EntityBase<Guid>(Id) {
public class UserService {
    public UserService(IRepository<User, Guid> userRepository);
    public async Task<User?> CreateUserAsync(string name, string email);
    public Task<User?> GetUserAsync(id Guid);
}
</file>
