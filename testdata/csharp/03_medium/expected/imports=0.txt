<file path="source.cs">
namespace Constructs.Medium03
public interface IRepository
    public Task AddAsync(entity TEntity, ct CancellationToken)
    public Task GetAsync(id TKey, ct CancellationToken)
    public Task RemoveAsync(id TKey, ct CancellationToken)
    public IAsyncEnumerable QueryAsync(Func predicate, ct CancellationToken)
public interface IEntity
public abstract class EntityBase : IEntity
    public readonly Id T;
public class InMemoryRepository : IRepository
    public Task AddAsync(entity TEntity, ct CancellationToken)
    public Task GetAsync(id TKey, ct CancellationToken)
    public Task RemoveAsync(id TKey, ct CancellationToken)
    public async IAsyncEnumerable QueryAsync(Func predicate, ct CancellationToken)
public class CachedRepository : IRepository
    public void CachedRepository(IRepository innerRepository, cacheExpiry TimeSpan)
    public async Task AddAsync(entity TEntity, ct CancellationToken)
    public async Task GetAsync(id TKey, ct CancellationToken)
    public async Task RemoveAsync(id TKey, ct CancellationToken)
    public IAsyncEnumerable QueryAsync(Func predicate, ct CancellationToken)
public class User : EntityBase<Guid>(Id)
    public readonly Id Guid;
    public readonly string Name;
    public readonly string Email;
    public readonly bool IsValid = => !string.IsNullOrEmpty(Name) && Email.Contains("@");
public class UserService
    public void UserService(IRepository userRepository)
    public async Task CreateUserAsync(string name, string email)
    public Task GetUserAsync(id Guid)
</file>
