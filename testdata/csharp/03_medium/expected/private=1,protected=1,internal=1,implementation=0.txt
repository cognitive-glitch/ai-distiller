<file path="source.cs">
#nullable enable

using System.Threading.Tasks;
namespace Constructs.Medium03;
public interface IRepository<TEntity, TKey> where TEntity : IEntity<TKey> where TKey : notnull {
    public Task AddAsync(TEntity entity, CancellationToken ct);
    public Task<TEntity?> GetAsync(TKey id, CancellationToken ct);
    public Task<bool> RemoveAsync(TKey id, CancellationToken ct);
    public IAsyncEnumerable<TEntity> QueryAsync(Func<TEntity, bool> predicate, CancellationToken ct);
}
public interface IEntity<TKey> {
    private TKey Id { get; }
}
public abstract record EntityBase(Id T) : IEntity;
public class InMemoryRepository<TEntity, TKey> : IRepository where TEntity : EntityBase<TKey> where TKey : notnull {
    private readonly ConcurrentDictionary<TKey, TEntity> _store = new();
    public Task AddAsync(TEntity entity, CancellationToken ct);
    public Task<TEntity?> GetAsync(TKey id, CancellationToken ct);
    public Task<bool> RemoveAsync(TKey id, CancellationToken ct);
    public async IAsyncEnumerable<TEntity> QueryAsync(Func<TEntity, bool> predicate, CancellationToken ct);
    private void CleanupExpiredEntities();
    protected virtual bool ValidateEntity(TEntity entity);
    internal int GetEntityCount();
}
public class CachedRepository<TEntity, TKey> : IRepository where TEntity : EntityBase<TKey> where TKey : notnull {
    private readonly IRepository<TEntity, TKey> _innerRepository;
    private readonly ConcurrentDictionary<TKey, TEntity> _cache = new();
    private readonly TimeSpan _cacheExpiry;
    public CachedRepository(IRepository<TEntity, TKey> innerRepository, TimeSpan cacheExpiry);
    public async Task AddAsync(TEntity entity, CancellationToken ct);
    public async Task<TEntity?> GetAsync(TKey id, CancellationToken ct);
    public async Task<bool> RemoveAsync(TKey id, CancellationToken ct);
    public IAsyncEnumerable<TEntity> QueryAsync(Func<TEntity, bool> predicate, CancellationToken ct);
    private void InvalidateCache();
    internal (int CacheSize, int RepositorySize) GetStats();
}
public record User(
    Id Guid,
    string Name,
    string Email,
    bool IsValid) : EntityBase<Guid>(Id) {
    private bool ValidateEmail();
}
public class UserService {
    private readonly IRepository<User, Guid> _userRepository;
    public UserService(IRepository<User, Guid> userRepository);
    public async Task<User?> CreateUserAsync(string name, string email);
    public Task<User?> GetUserAsync(Guid id);
    private static bool IsValidUserData(string name, string email);
}
</file>
