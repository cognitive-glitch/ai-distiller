<file path="source.cs">
using System
using System.Collections.Concurrent
using System.Collections.Generic
using System.Linq
using System.Threading
using System.Threading.Tasks
namespace Constructs.Medium03
interface IRepository:
    Task AddAsync(entity TEntity, ct CancellationToken)
    Task GetAsync(id TKey, ct CancellationToken)
    Task RemoveAsync(id TKey, ct CancellationToken)
    IAsyncEnumerable QueryAsync(Func predicate, ct CancellationToken)
interface IEntity:
abstract class EntityBase : IEntity:
    readonly Id T
class InMemoryRepository : IRepository:
    Task AddAsync(entity TEntity, ct CancellationToken)
    Task GetAsync(id TKey, ct CancellationToken)
    Task RemoveAsync(id TKey, ct CancellationToken)
    async IAsyncEnumerable QueryAsync(Func predicate, ct CancellationToken)
class CachedRepository : IRepository:
    void CachedRepository(IRepository innerRepository, cacheExpiry TimeSpan)
    async Task AddAsync(entity TEntity, ct CancellationToken)
    async Task GetAsync(id TKey, ct CancellationToken)
    async Task RemoveAsync(id TKey, ct CancellationToken)
    IAsyncEnumerable QueryAsync(Func predicate, ct CancellationToken)
class User : EntityBase<Guid>(Id):
    readonly Id Guid
    readonly string Name
    readonly string Email
    readonly bool IsValid = => !string.IsNullOrEmpty(Name) && Email.Contains("@")
class UserService:
    void UserService(IRepository userRepository)
    async Task CreateUserAsync(string name, string email)
    Task GetUserAsync(id Guid)
</file>
