<file path="source.ts">

interface INotifiable<P>:
    method handleNotification(payload: P): void
type NotificationPayload<T> = {
  recipient: T;
  message: string;
  timestamp: Date;
}

abstract class BaseNotificationService:
    protected transportName: string
    public constructor(transportName: string)
    public abstract send<T extends { id: string | number }>(payload: NotificationPayload<T>) -> Promise<boolean>
    protected log(message: string) -> void

class EmailNotificationService extends BaseNotificationService:
    public constructor()
    public async send<T extends { id: string | number; email: string }>(payload: NotificationPayload<T>) -> Promise<boolean>
</file>
