<file path="source.ts">
type ChangeEvent<T extends string> = `${T}Changed`
type Payload<T> = T extends (payload: infer P) => void ? P : never
type ListenerMap<TEventMap extends object> = {
  [K in keyof TEventMap as ChangeEvent<K & string>]: (payload: TEventMap[K]) => void;
}

export class TypedEventEmitter<TEventMap extends object> {
    private listeners: Partial<ListenerMap<TEventMap>> = {}
    public on<TEventName extends keyof ListenerMap<TEventMap>>(eventName: TEventName, listener: ListenerMap<TEventMap>[TEventName]): void
    public emit<TEventName extends keyof ListenerMap<TEventMap>>(eventName: TEventName, payload: Payload<ListenerMap<TEventMap>[TEventName]>): void
}

interface AppEvents {
    property user: { id: number; name: string }
    property settings: { theme: 'dark' | 'light' }
}
const appEmitter
</file>
