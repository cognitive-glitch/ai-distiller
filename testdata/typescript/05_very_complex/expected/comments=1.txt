<file path="/home/janreges/ai-distiller/testdata/typescript/05_very_complex/source.ts">
type ChangeEvent<T extends string> = `${T}Changed`
type ListenerMap<TEventMap extends object> = {
  [K in keyof TEventMap as ChangeEvent<K & string>]: (payload: TEventMap[K]) => void;
}

class TypedEventEmitter<TEventMap extends object>:
    function on<TEventName extends keyof ListenerMap<TEventMap>>(eventName: TEventName, listener: ListenerMap<TEventMap>[TEventName]) -> void
    function emit<TEventName extends keyof ListenerMap<TEventMap>>(eventName: TEventName, payload: Payload<ListenerMap<TEventMap>[TEventName]>) -> void
</file>
