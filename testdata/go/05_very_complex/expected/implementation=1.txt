<file path="source.go">
package cache

import (
    "sync"
// Cache is a generic, thread-safe key-value store.
// This implementation is specific to Linux.
)

type Cache[K comparable, V any] struct
// New creates a new Cache.

func New() *Cache[K, V]
    return &Cache[K, V]{
    		data: make(map[K]V),
    	}
// Set adds or updates a value in the cache.

func Set(c *Cache[K, V], key K, value V)
    c.mu.Lock()
    defer c.mu.Unlock()
    c.data[key] = value
// Get retrieves a value from the cache.

func Get(c *Cache[K, V], key K) (V, bool)
    c.mu.RLock()
    defer c.mu.RUnlock()
    val, ok := c.data[key]
    return val, ok
</file>
