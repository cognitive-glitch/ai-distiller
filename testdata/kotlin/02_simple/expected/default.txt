<file path="source.kt">
import kotlin.properties.Delegates
import kotlin.random.Random
interface Entity {
    fun getAge(): Long
    fun getEntityType(): String
}
interface Auditable {
    fun markModified(by: String)
}
abstract class BaseEntity {
    val id: String
    val createdAt: Long
    fun constructor(id: String, createdAt: Long)
    fun setActive(active: Boolean)
    abstract fun validate(): Boolean
    fun getStatusMessage(): String
}
class Product {
    val name: String
    val category: String
    fun constructor(id: String, name: String, category: String, _price: Double)
    var lastModified: Long
    var modifiedBy: String?
    var price: Double
    var description: String
    var stock: Int
    var discount: Double
    override fun getEntityType(): String
    override fun validate(): Boolean
    override fun getStatusMessage(): String
    fun applyDiscount(discountPercent: Double): Double
    object Companion {
        fun create(name: String, category: String, price: Double): Product
        const val MAX_NAME_LENGTH
        const val MIN_PRICE
    }
}
class Category {
    val name: String
    fun constructor(id: String, name: String, auditDelegate: Auditable)
}
class AuditImpl {
    var lastModified: Long
    var modifiedBy: String?
}
class ProductService {
    fun constructor(auditService: AuditService)
    fun addProduct(product: Product): Result<Unit>
    fun findProduct(id: String): Product?
    fun getProductsInCategory(categoryName: String): List<Product>
}
class AuditService {
    fun logAction(action: String, entityId: String)
    fun getAuditLog(): List<AuditEntry>
    data class AuditEntry(val action: String, val entityId: String, val timestamp: Long) {
    }
}
object ConfigManager {
    fun setConfig(key: String, value: String)
    fun getConfig(key: String): String?
    fun getConfigOrDefault(key: String, default: String): String
}
class ShoppingCart {
    fun constructor()
    fun constructor(customerId: String)
    var customerId: String?
    fun addItem(product: Product, quantity: Int)
    fun calculateTotal(): Double
    data class CartItem(val product: Product, var quantity: Int) {
    }
}
fun main()
</file>
