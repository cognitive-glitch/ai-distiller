<file path="source.kt">
class Repository {
    suspend fun findById(id: String): T?
    suspend fun findAll(): List<T>
    suspend fun count(): Long
}
class MutableRepository {
    suspend fun save(entity: T): T
    suspend fun update(entity: T): T
    suspend fun delete(id: String): Boolean
    suspend fun saveAll(entities: List): List<T>
}
abstract class BaseService {
    fun constructor(repository: R)
    inline fun <U> findByType(): Flow<U>
    suspend fun <K> processEntities(transformer: (T) -> K, filter: (K) -> Boolean): List<K>
    suspend fun <U> findAndMap(id: String, mapper: (T) -> U): U?
    abstract suspend fun validateEntity(entity: T): ValidationResult
}
class Entity {
    var id: String
    var version: Long
    override fun compareTo(other: Entity): Int
}
data class User(val id: String, val version: Long, val name: String, val email: String, val role: UserRole) {
    fun compareByName(other: User): Int
}
enum class UserRole {
    ADMIN
    MODERATOR
    USER
    GUEST
}
sealed class ValidationResult {
    object Valid {
    }
    data class Invalid(val errors: List) {
    }
    fun isValid(): Boolean
    fun getErrors(): List<String>
}
class UserRepository {
    override suspend fun findById(id: String): User?
    override suspend fun findAll(): List<User>
    override suspend fun count(): Long
    override suspend fun save(entity: User): User
    override suspend fun update(entity: User): User
    override suspend fun delete(id: String): Boolean
    override suspend fun saveAll(entities: List): List<User>
    fun findByRoleFlow(role: UserRole): Flow<User>
}
class UserService {
    fun constructor(repository: UserRepository)
    override suspend fun validateEntity(entity: User): ValidationResult
    inline fun <T> getEventsOfType(): Flow<T>
    suspend fun processUsersInBatches(batchSize: Int, processor: (List<User>) -> Unit)
    suspend fun createUsersAsync(userDtos: List): List<User>
}
sealed class UserEvent {
    data class Created(val userId: String) {
    }
    data class Updated(val userId: String) {
    }
    data class Deleted(val userId: String) {
    }
}
data class UserDto(val name: String, val email: String, val role: UserRole) {
}
class Cache {
    fun constructor(maxSize: Int)
    fun get(key: K): V?
    fun put(key: K, value: V, ttlMillis: Long)
    fun clearExpired()
}
inline fun <T> T?.requireNotNull(message: () -> String): T
inline fun <T, R, S> combineAndTransform(first: T, second: R, transformer: (T, R) -> S): S
inline fun <T> Any.safeCast(): T?
suspend fun <T> List<T>.forEachAsync(dispatcher: CoroutineDispatcher, action: (T) -> Unit)
fun main()
</file>
