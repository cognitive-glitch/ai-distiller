<file path="source.kt">
data class User(val id: Long, val name: String, val email: String?) {
    fun getDisplayName(): String
    object Companion {
        fun createUser(name: String, email: String?): User
    }
}
sealed class UserState {
    data class Active(val lastLoginAt: LocalDateTime) {
    }
    data class Suspended(val reason: String, val until: LocalDateTime?) {
    }
    object Banned {
    }
    object PendingVerification {
    }
}
fun String.isValidEmail(): Boolean
var secondOrNull: T?
class UserService {
    fun addUser(user: User): Boolean
    fun findUserById(id: Long): User?
    fun getUserState(userId: Long): String
}
enum class UserRole {
    ADMIN("Administrator", setOf("read", "write", "delete", "manage"))
    MODERATOR("Moderator", setOf("read", "write", "moderate"))
    USER("User", setOf("read", "write_own"))
    fun hasPermission(permission: String): Boolean
}
object UserConstants {
    const val MAX_USERNAME_LENGTH
    const val MIN_PASSWORD_LENGTH
    var ALLOWED_EMAIL_DOMAINS
    fun isAllowedEmailDomain(email: String): Boolean
}
inline fun <T> T.applyIf(condition: Boolean, block: T.() -> T): T
fun main()
</file>
