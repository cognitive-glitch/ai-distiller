<file path="source.rs">

struct SourceFile {
    pub path: String,
    content: String, // This field is private.,
    lines_of_code: u32,
}

trait Summarizable {
}

impl SourceFile {

    fn new(path: String, content: String) -> Self

    fn line_count(&self) -> u32

    -fn get_file_extension(&self) -> Option<&str>

    ~fn process_internal(&mut self)

    -fn is_valid(&self) -> bool
}

impl Summarizable for SourceFile {

    -fn summary(&self) -> String
}

trait FileOperations {
}

enum FileError {
    NotFound,
    PermissionDenied,
    InvalidContent,
}

impl FileOperations for SourceFile {

    -type Error = FileError;

    -fn read_content(&self) -> Result<&str, Self::Error>

    -fn write_content(&mut self, content: String) -> Result<(), Self::Error>
}

-fn main()
</file>
