<file path="source.rs">

pub trait Configurable {

    fn from_source<S: DataSource>(source: &S) -> Self;
}
// A trait with a Generic Associated Type (GAT).
// `Reader` has its own lifetime `'a`, which is tied to `&'a self`.

pub trait DataSource {
    type Reader<'a>: std::io::Read where Self: 'a;
    type Config<T: Clone>: Clone;

    fn get_reader<'a>(&'a self) -> Self::Reader<'a>;

    fn get_config<T: Clone>(&self) -> Self::Config<T>;

    fn process_with_bounds<'a, T, U>(&'a self, input: T) -> U
}
// A struct that would use a procedural derive macro in a real project.
// The parser must handle attributes on the struct and its fields.

pub struct ServerConfig {
    pub host: String,
    pub port: u16,
}

impl Configurable for ServerConfig {
}
// A function with a Higher-Rank Trait Bound (HRTB).
// The `F` closure must work for *any* lifetime `'a`.

pub fn process_all_sources<F>(sources: Vec<&dyn DataSource>, mut processor: F) where F: for<'a> FnMut(Box<dyn std::io::Read + 'a>),
// Advanced trait with const generics and GATs

pub trait AdvancedContainer<const N: usize> {
    type Item<'a>: Clone where Self: 'a;
    type Iterator<'a>: Iterator<Item = Self::Item<'a>> where Self: 'a;

    fn get_items<'a>(&'a self) -> Self::Iterator<'a>;

    fn process_batch<'a, F>(&'a self, f: F) -> [Option<Self::Item<'a>>; N]
}
// Implementation with const generics

pub struct FixedArray<T: Clone, const N: usize>;

impl FixedArray<T, N> {
    // Create new fixed array

    pub fn new() -> Self
}

impl AdvancedContainer<N> for FixedArray<T, N> {
}
// Advanced async trait with GATs

pub trait AsyncDataProcessor {
    type Output<'a>: Send where Self: 'a;
    type Error: std::error::Error + Send + Sync;
}
</file>
