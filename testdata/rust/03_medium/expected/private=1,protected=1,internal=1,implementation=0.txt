<file path="source.rs">
use std::fmt::{Debug, Display};
// A custom error type for our parsing operations.

pub enum AnalysisError {
    IoError(std::io::Error),
    EmptyContent,
    InvalidFormat(String),
}
// A trait for a data source that can be analyzed.
// This uses an associated type, a more advanced trait feature.

pub trait DataSource {
    type Content: AsRef<[u8]>;

    fn get_content(&self) -> Result<Self::Content, AnalysisError>

    pub fn content_slice<'a>(&'a self) -> Option<&'a [u8]> where Self::Content: 'a
}
// A generic container for an analysis result.
// It's generic over the type `T` which must implement `Display`.

pub struct AnalysisResult<T: Display> {
    source_id: String,
    result: T,
    metadata: Option<String>,
}

impl AnalysisResult<T> {
    // Create new analysis result

    pub fn new(source_id: String, result: T) -> Self
    // Private validation method

    fn is_valid(&self) -> bool
    // Internal metadata setter

    pub(crate) fn set_metadata(&mut self, metadata: String)
}
// A generic function with a lifetime `'a` and trait bounds.
// It analyzes a data source and returns a result.

pub fn analyze<'a, S>(source: &'a S) -> Result<AnalysisResult<String>, AnalysisError> where S: DataSource + ?Sized, // `?Sized` is an interesting bound to parse.
// Advanced generic function with multiple lifetime parameters

struct InMemorySource {
    data: Vec<u8>,
}

impl DataSource for InMemorySource {

    type Content = Vec<u8>;

    fn get_content(&self) -> Result<Self::Content, AnalysisError>
}

impl Debug for InMemorySource {

    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result
}
// Generic trait with lifetime bounds

pub trait Processor<'a, T> {
}
// Private helper method
// Implementation for string processing

pub struct StringProcessor;

impl Processor<'a, String> for StringProcessor {

    type Output = &'a str;

    fn process(&self, input: &'a String) -> Self::Output
}

fn main()
</file>
