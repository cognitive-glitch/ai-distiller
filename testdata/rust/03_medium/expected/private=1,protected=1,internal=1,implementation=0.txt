<file path="source.rs">
use std::fmt::{Debug, Display};

enum AnalysisError {
    IoError(std::io::Error),
    EmptyContent,
    InvalidFormat(String),
}

trait DataSource {
}

struct AnalysisResult<T: Display> {
    source_id: String,
    result: T,
    metadata: Option<String>,
}

impl AnalysisResult<T> {

    fn new(source_id: String, result: T) -> Self

    -fn is_valid(&self) -> bool

    ~fn set_metadata(&mut self, metadata: String)
}

fn analyze(source: &'a S) -> Result<AnalysisResult<String>, AnalysisError>

-struct InMemorySource {
    data: Vec<u8>,
}

impl DataSource for InMemorySource {

    -type Content = Vec<u8>;

    -fn get_content(&self) -> Result<Self::Content, AnalysisError>
}

impl Debug for InMemorySource {

    -fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result
}

trait Processor<'a, T> {
}

struct StringProcessor;

impl Processor<'a, String> for StringProcessor {

    -type Output = &'a str;

    -fn process(&self, input: &'a String) -> Self::Output
}

-fn main()
</file>
