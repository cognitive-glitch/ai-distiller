<file path="source.rs">
use std::fmt::{Debug, Display};

enum AnalysisError {
    IoError(std::io::Error),
    EmptyContent,
    InvalidFormat(String),
}

trait DataSource {
    type Content: AsRef<[u8]>;

    get_content(&self) -> Result<Self::Content, AnalysisError>

    content_slice<'a>() -> Option<&'a [u8]> where Self::Content: 'a
}

struct AnalysisResult<T: Display>;

impl AnalysisResult<T> {

    new(source_id: String, result: T) -> Self
}

analyze<'a, S>(source: &'a S) -> Result<AnalysisResult<String>, AnalysisError> where S: DataSource + ?Sized, // `?Sized` is an interesting bound to parse.

impl DataSource for InMemorySource {
}

impl Debug for InMemorySource {
}

trait Processor<'a, T> {
}

struct StringProcessor;

impl Processor<'a, String> for StringProcessor {
}
</file>
