<file path="source.rs">
// 03_medium.rs
// A test for generics, lifetimes, advanced traits, and error handling.
use std::fmt::{Debug, Display};
// A custom error type for our parsing operations.
// The parser should handle enum definitions and derive attributes.

enum AnalysisError {
    IoError(std::io::Error),
    EmptyContent,
    InvalidFormat(String),
}
// A trait for a data source that can be analyzed.
// This uses an associated type, a more advanced trait feature.

trait DataSource {
}
// Default method with lifetime parameters
// A generic container for an analysis result.
// It's generic over the type `T` which must implement `Display`.

struct AnalysisResult<T: Display>;

impl AnalysisResult<T> {
    // Create new analysis result

    fn new(source_id: String, result: T) -> Self
    // Private validation method
    // Internal metadata setter
}
// A generic function with a lifetime `'a` and trait bounds.
// It analyzes a data source and returns a result.
// The parser must correctly handle lifetimes and `where` clauses.

fn analyze(source: &'a S) -> Result<AnalysisResult<String>, AnalysisError>
// A mock analysis.
// Advanced generic function with multiple lifetime parameters
// An example implementation of our DataSource.

impl DataSource for InMemorySource {
}

impl Debug for InMemorySource {
}
// Generic trait with lifetime bounds

trait Processor<'a, T> {
}
// Private helper method
// Implementation for string processing

struct StringProcessor;

impl Processor<'a, String> for StringProcessor {
}
</file>
