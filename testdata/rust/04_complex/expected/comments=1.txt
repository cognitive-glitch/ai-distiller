<file path="source.rs">
// 04_complex.rs
// A test for macros, async, unsafe FFI, and advanced ownership.
use std::sync::{Arc, Mutex};
use std::ffi::{c_char, CStr};
use std::future::Future;
use std::pin::Pin;
// FFI: Declaring an external function from a C library.
// The parser must handle `extern "C"` blocks.
// Additional FFI function for complex validation
// A simple declarative macro for creating a new, validated config.
// The parser must handle the unique syntax of `macro_rules!`.
// In a real scenario, more complex logic would be here.
// Multiple macro patterns
// Macro for generating validation functions
// Using the macro to generate functions

struct Config;
// A service that uses a shared, mutable cache.
// This tests `Arc<Mutex<T>>`, a very common concurrent pattern.

struct AnalysisService;

impl AnalysisService {
    // Create new analysis service

    fn new() -> Self
    // Asynchronously validates a piece of code using the native FFI function.
    // This tests `async fn` syntax and `unsafe` blocks.

    async fn validate_code(&self, code: &str) -> Result<bool, &'static str>
    // A private helper method.
    // Internal unsafe method for advanced operations
    // Private async method
}
// Advanced trait with async methods

trait AsyncProcessor {
}
// Default async implementation
// Implementation for the analysis service

impl AsyncProcessor for AnalysisService {
}
// Union type for advanced FFI

impl FFIData {
    // Safe constructor

    fn new_integer(value: i64) -> Self
    // Unsafe getter

    fn get_integer(&self) -> i64
    // Private unsafe method
}
// Note: This requires a tokio runtime to execute.
// e.g., `#[tokio::main]`
</file>
