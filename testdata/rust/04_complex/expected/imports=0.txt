<file path="source.rs">
// Additional FFI function for complex validation
// A simple declarative macro for creating a new, validated config.
// The parser must handle the unique syntax of `macro_rules!`.
// Macro for generating validation functions

pub struct Config;
// A service that uses a shared, mutable cache.
// This tests `Arc<Mutex<T>>`, a very common concurrent pattern.

pub struct AnalysisService;

impl AnalysisService {
    // Create new analysis service

    pub fn new() -> Self
    // Asynchronously validates a piece of code using the native FFI function.
    // This tests `async fn` syntax and `unsafe` blocks.

    pub async fn validate_code(&self, code: &str) -> Result<bool, &'static str>
    // Internal unsafe method for advanced operations
    // Private async method
}
// Advanced trait with async methods

pub trait AsyncProcessor {
    type Item;
    type Error;

    pub async fn process_async(&self, item: Self::Item) -> Result<String, Self::Error>

    pub async fn batch_process(&self, items: Vec<Self::Item>) -> Vec<Result<String, Self::Error>>
}
// Implementation for the analysis service

impl AsyncProcessor for AnalysisService {
}
// Union type for advanced FFI

impl FFIData {
    // Safe constructor

    pub fn new_integer(value: i64) -> Self
    // Unsafe getter

    pub fn get_integer(&self) -> i64
    // Private unsafe method
}
</file>
