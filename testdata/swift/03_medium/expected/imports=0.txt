<file path="source.swift">
// A simple LIFO stack.

public class Stack {
    // Pushes a new element.
    public func push(element: Element)
    // Returns the top element without removing it.
    public func peek() -> Element? { storage.last }
    // Removes and returns the top element.
    public func pop() -> Element? { storage.popLast() }
}

public class extension Stack {
}
// Errors for math-centric operations.

public enum MathError {
    case emptyStack
    case divideByZero
    case negativeValue
    // Private helper for error categorization
}
// Describes a cache that stores key/value pairs.

public protocol Cacheable {
    public func value(key: Key) -> Value?
    public func contains(key: Key) -> Bool
}
// Dictionary already satisfies `Cacheable` when paired properly.
// Generic cache with expiration

public class ExpiringCache {
}
</file>
