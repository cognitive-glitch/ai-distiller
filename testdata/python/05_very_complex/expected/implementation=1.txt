<file path="source.py">
import asyncio
from typing import Type, TypeVar, Generic
T = TypeVar('T')

class ValidatedSetting:
    def __init__(self, setting_type: Type[T], default: T):
        self.setting_type = setting_type
                self.default = default
                self._name = None
    def __set_name__(self, owner, name):
        self._name = f"_{name}"
    def __get__(self, instance, owner) -> T:
        if instance is None:
                    return self
                return getattr(instance, self._name, self.default)
    def __set__(self, instance, value: T):
        if not isinstance(value, self.setting_type):
                    raise TypeError(f"Setting must be of type {self.setting_type.__name__}")
                setattr(instance, self._name, value)

class SingletonMeta(type):
    def __call__(cls):
        if cls not in cls._instances:
                    cls._instances[cls] = super().__call__(*args, **kwargs)
                return cls._instances[cls]

class AppConfig:
    timeout = ValidatedSetting(int, 30)
    retries = ValidatedSetting(int, 3)
    api_key = ValidatedSetting(str, "")
    def __init__(self):
        self._temp_settings = {}
                print("Initializing AppConfig singleton...")
    def load_from_remote(self, url: str) -> None:
        """Asynchronously loads a partial config from a remote URL."""
                print(f"Fetching config from {url}...")
                await asyncio.sleep(0.1) # Simulate network call
                # In a real scenario, this would update settings
                self.timeout = 45
    def __enter__(self):
        """Enter a transactional context for settings changes."""
                self._temp_settings = {
                    'timeout': self.timeout,
                    'retries': self.retries,
                    'api_key': self.api_key
                }
                return self
    def __exit__(self, exc_type, exc_val, exc_tb):
        """If an exception occurred, revert all changes."""
                if exc_type:
                    print("Transaction failed. Reverting settings.")
                    self.timeout = self._temp_settings['timeout']
                    self.retries = self._temp_settings['retries']
                    self.api_key = self._temp_settings['api_key']
                else:
                    print("Transaction succeeded.")
                self._temp_settings = {}
</file>
