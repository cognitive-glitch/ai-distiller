<file path="source.js">
const TASK_METADATA: symbol = Symbol('taskMetadata')
const TaskPrototype: object = { init(id, generatorFunc, props), getMetadata(key) -> any, _updateMetadata(key, value) }

class CooperativeScheduler:
    constructor()
    registerTask(generatorFunc: GeneratorFunction, options = {}) -> number
    start()
    async run()
    async shutdown(timeout = 5000) -> Promise<void>
    getMetrics() -> object
    _cleanup()
    inspectTask(taskId: number) -> object

class MemoryPool:
    constructor(factory: Function, maxSize: number = 10)
    acquire() -> object
    release(obj: object)
    getStats() -> object
const delay = (ms)
* function counterTask()
* function dataFetcherTask(task)
* function complexIteratorTask()
const scheduler = new CooperativeScheduler()
const objectPool = new MemoryPool(() => ({ data: null, reset() { this.data = null; } }))
</file>
