<file path="/home/janreges/ai-distiller/testdata/javascript/05_very_complex/source.js">
const TASK_METADATA: symbol = Symbol('taskMetadata')
const TaskPrototype: object = { init(id, generatorFunc, props), getMetadata(key) -> any, _updateMetadata(key, value) }

class CooperativeScheduler:
    constructor()
    registerTask(generatorFunc: GeneratorFunction, options = {}) -> number
    start()
    async shutdown(timeout = 5000) -> Promise<void>
    getMetrics() -> object
    inspectTask(taskId: number) -> object

class MemoryPool:
    constructor(factory: Function, maxSize: number = 10)
    acquire() -> object
    release(obj: object)
    getStats() -> object
// --- Usage Example ---
// A helper function that returns a promise, for tasks to yield.
const delay = (ms)
// Define some tasks as generator functions
* function counterTask()
* function dataFetcherTask(task)
* function complexIteratorTask()
const scheduler = new CooperativeScheduler()
// After some time, we can register another task dynamically.
// Create memory pool example
const objectPool = new MemoryPool(() => ({ data: null, reset() { this.data = null; } }))
// module.exports = { CooperativeScheduler, TaskPrototype, MemoryPool }
</file>
